import g4f
import time

def genai_transcript(trace):

    """
    Generates a professional transcript/analysis of the given trace log output.

    Returns:
        str: The transcript generated by the model, or None if it failed.
    """


    RETRY_LIMIT = 3
    DEFAULT_MODEL = g4f.models.gpt_4

    prompt = f'''
        Analyse the following bpftrace output and provide a highly detailed 
        professional overview including key syscalls, anomalies, and patterns
        and provide a paragraph wise output with no headings etc. (and make 
        sure the output is in pure text format, not markdown):\n\n"
        {trace}
    '''
    if trace!='':
        attempt = 0
        while attempt < RETRY_LIMIT:
            try:
                print("[*] Generating AI Overview via G4F API...")
                response = g4f.ChatCompletion.create(
                        model= DEFAULT_MODEL ,
                        messages=[{"role": "user", "content": prompt}]
                        )
                text = str(response).strip()
                print(f"{len(text)} Charecters Generated")
                return text

            except g4f.errors.G4FError as e:
                attempt += 1
                wait = 1 * attempt
                print(f"[*] API error: {e}. Retrying in {wait}s... (Attempt {attempt}/{RETRY_LIMIT})")
                time.sleep(wait)

            except (ValueError, TypeError, KeyError) as e:
                print(f"[*] Parsing error: {e}")
                print("[*] No point in retrying, exiting...")
                break

            except Exception as e:
                print(f"[*] Unexpected error: {e}")
                break

        print("[*] Failed to generate transcript after multiple attempts.")
        return None
    print("[*] Trace log is empty, exiting...")

